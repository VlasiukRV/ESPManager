
#include "src/ESPConfiguration.h"
//#include "src/services/settingsManager/Test_SettingsManager.h"

ESPConfiguration *espConfiguration = new ESPConfiguration();
bool mode = true;

// 'Uptarget-03-1536x401', 128x64px
const unsigned char epd_bitmap_Uptarget_03_1536x401[]
PROGMEM = {
        0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
        0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
        0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
        0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
        0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
        0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
        0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
        0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
        0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
        0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
        0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
        0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
        0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
        0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
        0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
        0xff, 0xf9, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
        0xff, 0xf9, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
        0xff, 0xf1, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
        0xff, 0x81, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
        0xfe, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
        0xfc, 0x70, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
        0xf8, 0x80, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
        0xf1, 0x1f, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
        0xf2, 0x78, 0xc7, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
        0xe4, 0xf8, 0x67, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
        0xe4, 0xff, 0x13, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
        0xe1, 0xf1, 0x93, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
        0xc9, 0xe0, 0x93, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
        0x09, 0x66, 0x49, 0x0f, 0xe7, 0xff, 0xcf, 0xff, 0xff, 0xff, 0xff, 0xff, 0x9f, 0xff, 0xff, 0xff,
        0x09, 0x26, 0x4b, 0x0f, 0xe7, 0xff, 0xcf, 0xff, 0xff, 0xff, 0xff, 0xff, 0x9f, 0xff, 0xff, 0xff,
        0xc9, 0x20, 0x1f, 0x0f, 0xe7, 0xff, 0xcf, 0xff, 0xff, 0xff, 0xff, 0xff, 0x9f, 0xff, 0xff, 0xff,
        0xe1, 0x30, 0x9f, 0x4f, 0xe7, 0xff, 0xcf, 0xff, 0xff, 0xff, 0xff, 0xff, 0x9f, 0xff, 0xff, 0xff,
        0xe0, 0x9f, 0x1e, 0x4f, 0xe7, 0xc7, 0xc1, 0xf1, 0xff, 0x3c, 0x6f, 0xcf, 0x83, 0xfe, 0x3f, 0x8f,
        0xe4, 0xc0, 0x3e, 0x4f, 0xe4, 0x01, 0xc1, 0xc0, 0x70, 0x30, 0x06, 0x03, 0x83, 0xf8, 0x0e, 0x03,
        0xf2, 0x60, 0xfc, 0xcf, 0xe4, 0x00, 0xc3, 0x80, 0x30, 0x60, 0x04, 0x01, 0x87, 0xf0, 0xc4, 0x21,
        0xf1, 0x1f, 0xf8, 0xcf, 0xe4, 0x7c, 0x4f, 0x9f, 0x11, 0xc7, 0xc4, 0xf8, 0x9f, 0xf3, 0xfc, 0xf8,
        0xf8, 0x83, 0xf1, 0xcf, 0xe4, 0xfe, 0x4f, 0x3f, 0x93, 0xcf, 0xc0, 0xfc, 0x9f, 0xe3, 0xf9, 0xfc,
        0xfc, 0x63, 0xe3, 0xcf, 0xe4, 0xfe, 0x4f, 0x3f, 0x93, 0xcf, 0xe0, 0x00, 0x9f, 0xe7, 0xf9, 0xfc,
        0xfe, 0x1f, 0x87, 0xcf, 0xe4, 0xfe, 0x4f, 0x3f, 0x93, 0xcf, 0xe0, 0x00, 0x9f, 0xe3, 0xf9, 0xfc,
        0xff, 0x80, 0x1f, 0xc7, 0xe4, 0x7e, 0x4f, 0x1f, 0x13, 0xcf, 0xc0, 0xff, 0x9f, 0xf3, 0xf8, 0xfc,
        0xff, 0xe0, 0x7f, 0xe3, 0xc4, 0x3c, 0xcf, 0x9f, 0x13, 0xc7, 0x84, 0x79, 0x9f, 0xf1, 0xe4, 0x79,
        0xff, 0xf9, 0xff, 0xf0, 0x0c, 0x00, 0xc0, 0x80, 0x13, 0xe0, 0x06, 0x01, 0x81, 0x98, 0x06, 0x01,
        0xff, 0xf9, 0xff, 0xf8, 0x1c, 0x01, 0xe0, 0xc0, 0x13, 0xf0, 0x07, 0x03, 0xc1, 0x9c, 0x0f, 0x03,
        0xff, 0xff, 0xff, 0xff, 0xfc, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe7, 0xff, 0xff, 0xff, 0xff, 0xff,
        0xff, 0xff, 0xff, 0xff, 0xfc, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc7, 0xff, 0xff, 0xff, 0xff, 0xff,
        0xff, 0xff, 0xff, 0xff, 0xfc, 0xff, 0xff, 0xff, 0xff, 0xf7, 0xcf, 0xff, 0xff, 0xff, 0xff, 0xff,
        0xff, 0xff, 0xff, 0xff, 0xfc, 0xff, 0xff, 0xff, 0xff, 0xe0, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xff,
        0xff, 0xff, 0xff, 0xff, 0xfc, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff,
        0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
        0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
        0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
        0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
        0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
        0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
        0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
        0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
        0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
        0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
        0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
        0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
        0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
        0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
        0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
        0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff
};

// Array of all bitmaps for convenience. (Total bytes used to store images in PROGMEM = 1040)
const int epd_bitmap_allArray_LEN = 1;
const unsigned char *epd_bitmap_allArray[1] = {
        epd_bitmap_Uptarget_03_1536x401
};

void setup() {

    Serial.begin(9600);

    //bool test_res = Test_SettingsManager::runTest();

    if (espConfiguration->init()) {

        espConfiguration->webServer->on("/settings", HTTP_GET, [](AsyncWebServerRequest *request) {

            Serial.println(".... HTTP_GET /settings");

            char buffer[512];
            espConfiguration->getESPPropertiesJSON(buffer);

            request->send(200, "application/json", buffer);

        });

        espConfiguration->webServer->on("/configuration", HTTP_GET, [](AsyncWebServerRequest *request) {

            Serial.println(".... HTTP_GET /configuration");

            char buffer[512];
            espConfiguration->getESPConfigurationJSON(buffer);

            request->send(200, "application/json", buffer);

        });

        espConfiguration->webServer->on("/saveConfiguration", HTTP_POST, [](AsyncWebServerRequest *request) {

            Serial.println(".... HTTP_POST /saveConfiguration");


            DynamicJsonDocument doc(1024);
            espConfiguration->setESPConfigurationJSON(&doc);

            File file = SPIFFS.open("/configuration.json", FILE_WRITE);
            int size = serializeJson(doc, file);
            if (size == 0) {
                Serial.println(F("Failed to write to file"));
            } else {
                Serial.printf("Wrote to file %i \n", size);
            }
            file.close();

            char buffer[512];
            serializeJson(doc, buffer, 512);
            request->send(200, "application/json", buffer);

        });

        espConfiguration->webServer->on("/updateSettings", HTTP_POST, [](AsyncWebServerRequest *request) {

            Serial.println(".... HTTP_POST /updateSettings");

            int params = request->params();
            for (int i = 0; i < params; i++) {
                AsyncWebParameter *p = request->getParam(i);
                const char *name = p->name().c_str();
                ESPProperty property = espConfiguration->espProperties->getSettingByName(strdup(name));
                switch (property.getType()) {
                    case CHAR: {
                        const char *value = p->value().c_str();
                        espConfiguration->espProperties->editSetting(strdup(name), strdup(value));
                        Serial.printf("POST[%s]: %s\n", name, value);
                        break;
                    }
                    case INT: {
                        int value = p->value().toInt();
                        espConfiguration->espProperties->editSetting(strdup(name), value);
                        Serial.printf("POST[%s]: %i\n", name, value);
                        break;
                    }
                    default:
                        break;
                }

            }

            if (espConfiguration->espProperties->saveSettings()) {
                Serial.println(F("-devise settings saved"));
            }

            request->send(200);

        });

        espConfiguration->webServer->on("/addLedSensor", HTTP_POST, [](AsyncWebServerRequest *request) {

            Serial.println(".... HTTP_POST /addLedSensor");

            if (request->hasParam("name", true)
                && request->hasParam("pin", true)
                && request->hasParam("synonym", true)
                && request->hasParam("mqtt_topic", true)) {

                String p1 = request->getParam("name", true)->value();
                const char *name = p1.c_str();

                String p2 = request->getParam("synonym", true)->value();
                const char *synonym = p2.c_str();

                String p3 = request->getParam("pin", true)->value();
                int pin = p3.toInt();

                String p4 = request->getParam("mqtt_topic", true)->value();
                const char *mqtt_topic = p4.c_str();

                espConfiguration->sensorsManager->addLedSensor(pin, strdup(name), strdup(synonym), strdup(mqtt_topic));
                espConfiguration->mqttManager->subscribe(strdup(mqtt_topic));
            }

            request->send(200);

        });

        espConfiguration->webServer->on("/addDHTSensor", HTTP_POST, [](AsyncWebServerRequest *request) {

            Serial.println(".... HTTP_POST /addDHTSensor");

            if (request->hasParam("name", true)
                && request->hasParam("pin", true)
                && request->hasParam("synonym", true)
                && request->hasParam("mqtt_topic", true)) {

                String p1 = request->getParam("name", true)->value();
                const char *name = p1.c_str();

                String p2 = request->getParam("synonym", true)->value();
                const char *synonym = p2.c_str();

                String p3 = request->getParam("pin", true)->value();
                int pin = p3.toInt();

                String p4 = request->getParam("mqtt_topic", true)->value();
                const char *mqtt_topic = p4.c_str();

                espConfiguration->sensorsManager->addDHTSensor(pin, strdup(name), strdup(synonym), strdup(mqtt_topic));

            }

            request->send(200);

        });

        espConfiguration->webServer->on("/addMotionSensor", HTTP_POST, [](AsyncWebServerRequest *request) {

            Serial.println(".... HTTP_POST /addMotionSensor");

            if (request->hasParam("name", true)
                && request->hasParam("pin", true)
                && request->hasParam("synonym", true)
                && request->hasParam("mqtt_topic", true)) {

                String p1 = request->getParam("name", true)->value();
                const char *name = p1.c_str();

                String p2 = request->getParam("synonym", true)->value();
                const char *synonym = p2.c_str();

                String p3 = request->getParam("pin", true)->value();
                int pin = p3.toInt();

                String p4 = request->getParam("mqtt_topic", true)->value();
                const char *mqtt_topic = p4.c_str();

                espConfiguration->sensorsManager->addMotionSensor(pin, strdup(name), strdup(synonym),
                                                                  strdup(mqtt_topic));

            }

            request->send(200);

        });

        espConfiguration->webServer->on("/state", HTTP_GET, [](AsyncWebServerRequest *request) {

            Serial.println(".... HTTP_GET /state");

            char buffer[512];
            espConfiguration->getESPStateJSON(buffer);

            request->send(200, "application/json", buffer);

        });
    }

}

void loop() {

    delay(200);

    if (!espConfiguration->mqttManager->connected()) {
        //espConfiguration->mqttManager->connectMQTTBroker();
    } else {
        espConfiguration->mqttManager->loop(espConfiguration->sensorsManager);
    }

}
